application.name=servicio-gateway-docker

server.port=9090

##eureka.client.service-url.defaultZone=http://localhost:8761/eureka

##cuando ejecuto el contenedor que SI esta en docker,pero eureka no
eureka.client.serviceUrl.defaultZone=http://host.docker.internal:8761/eureka
eureka.client.healthcheck.enabled=true
##spring.zipkin.base-url=http://host.docker.internal:9411

spring.sleuth.async.enabled=true

management.endpoints.web.exposure.include=*
spring.mvc.pathmatch.matching-strategy=ant-path-matcher
##PARA ZIPKIN CON PONER LA URL EN EL CONFIG GENERAL VALE
##spring.zipkin.base-url=http://localhost:9411/
##spring.sleuth.sampler.probability=1.0
##spring.sleuth.async.enabled=true

##para metricas
management.endpoints.web.exposure.include=*



##aqui se definen como arrays
spring.cloud.gateway.routes[0].id=micro-superhero-metricas
##uri (LoadBalancer://)
spring.cloud.gateway.routes[0].uri=lb://micro-superhero-metricas
##path,es un map
spring.cloud.gateway.routes[0].predicates=Path=/api/superhero/**
##parametros que no tendra en cuenta cuando haga la peticion al microservicio,elimina api y luego usuarios, por eso el 2
spring.cloud.gateway.routes[0].filters=StripPrefix=2

##aqui se definen como arrays
spring.cloud.gateway.routes[1].id=micro-yoda-metricas
##uri (LoadBalancer://)
spring.cloud.gateway.routes[1].uri=lb://micro-yoda-metricas
##path,es un map
spring.cloud.gateway.routes[1].predicates=Path=/api/yoda/**
##parametros que no tendra en cuenta cuando haga la peticion al microservicio,elimina api y luego usuarios, por eso el 2
spring.cloud.gateway.routes[1].filters=StripPrefix=2





